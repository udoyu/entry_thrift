/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef EntryThriftSvr_H
#define EntryThriftSvr_H

#include <thrift/TDispatchProcessor.h>
#include "entry_thrift_types.h"

namespace entry {

class EntryThriftSvrIf {
 public:
  virtual ~EntryThriftSvrIf() {}
  virtual void Send(ThriftPkg& _return, const ThriftPkg& req) = 0;
};

class EntryThriftSvrIfFactory {
 public:
  typedef EntryThriftSvrIf Handler;

  virtual ~EntryThriftSvrIfFactory() {}

  virtual EntryThriftSvrIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(EntryThriftSvrIf* /* handler */) = 0;
};

class EntryThriftSvrIfSingletonFactory : virtual public EntryThriftSvrIfFactory {
 public:
  EntryThriftSvrIfSingletonFactory(const boost::shared_ptr<EntryThriftSvrIf>& iface) : iface_(iface) {}
  virtual ~EntryThriftSvrIfSingletonFactory() {}

  virtual EntryThriftSvrIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(EntryThriftSvrIf* /* handler */) {}

 protected:
  boost::shared_ptr<EntryThriftSvrIf> iface_;
};

class EntryThriftSvrNull : virtual public EntryThriftSvrIf {
 public:
  virtual ~EntryThriftSvrNull() {}
  void Send(ThriftPkg& /* _return */, const ThriftPkg& /* req */) {
    return;
  }
};

typedef struct _EntryThriftSvr_Send_args__isset {
  _EntryThriftSvr_Send_args__isset() : req(false) {}
  bool req;
} _EntryThriftSvr_Send_args__isset;

class EntryThriftSvr_Send_args {
 public:

  EntryThriftSvr_Send_args() {
  }

  virtual ~EntryThriftSvr_Send_args() throw() {}

  ThriftPkg req;

  _EntryThriftSvr_Send_args__isset __isset;

  void __set_req(const ThriftPkg& val) {
    req = val;
  }

  bool operator == (const EntryThriftSvr_Send_args & rhs) const
  {
    if (!(req == rhs.req))
      return false;
    return true;
  }
  bool operator != (const EntryThriftSvr_Send_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntryThriftSvr_Send_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class EntryThriftSvr_Send_pargs {
 public:


  virtual ~EntryThriftSvr_Send_pargs() throw() {}

  const ThriftPkg* req;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntryThriftSvr_Send_result__isset {
  _EntryThriftSvr_Send_result__isset() : success(false) {}
  bool success;
} _EntryThriftSvr_Send_result__isset;

class EntryThriftSvr_Send_result {
 public:

  EntryThriftSvr_Send_result() {
  }

  virtual ~EntryThriftSvr_Send_result() throw() {}

  ThriftPkg success;

  _EntryThriftSvr_Send_result__isset __isset;

  void __set_success(const ThriftPkg& val) {
    success = val;
  }

  bool operator == (const EntryThriftSvr_Send_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const EntryThriftSvr_Send_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const EntryThriftSvr_Send_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _EntryThriftSvr_Send_presult__isset {
  _EntryThriftSvr_Send_presult__isset() : success(false) {}
  bool success;
} _EntryThriftSvr_Send_presult__isset;

class EntryThriftSvr_Send_presult {
 public:


  virtual ~EntryThriftSvr_Send_presult() throw() {}

  ThriftPkg* success;

  _EntryThriftSvr_Send_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class EntryThriftSvrClient : virtual public EntryThriftSvrIf {
 public:
  EntryThriftSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  EntryThriftSvrClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Send(ThriftPkg& _return, const ThriftPkg& req);
  void send_Send(const ThriftPkg& req);
  void recv_Send(ThriftPkg& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class EntryThriftSvrProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<EntryThriftSvrIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (EntryThriftSvrProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Send(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  EntryThriftSvrProcessor(boost::shared_ptr<EntryThriftSvrIf> iface) :
    iface_(iface) {
    processMap_["Send"] = &EntryThriftSvrProcessor::process_Send;
  }

  virtual ~EntryThriftSvrProcessor() {}
};

class EntryThriftSvrProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  EntryThriftSvrProcessorFactory(const ::boost::shared_ptr< EntryThriftSvrIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< EntryThriftSvrIfFactory > handlerFactory_;
};

class EntryThriftSvrMultiface : virtual public EntryThriftSvrIf {
 public:
  EntryThriftSvrMultiface(std::vector<boost::shared_ptr<EntryThriftSvrIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~EntryThriftSvrMultiface() {}
 protected:
  std::vector<boost::shared_ptr<EntryThriftSvrIf> > ifaces_;
  EntryThriftSvrMultiface() {}
  void add(boost::shared_ptr<EntryThriftSvrIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Send(ThriftPkg& _return, const ThriftPkg& req) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Send(_return, req);
    }
    ifaces_[i]->Send(_return, req);
    return;
  }

};

} // namespace

#endif
