/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "entry_thrift_types.h"

#include <algorithm>

namespace entry {

const char* ThriftPkg::ascii_fingerprint = "DC4A7944CA87068C3A6D1BCBB8633569";
const uint8_t ThriftPkg::binary_fingerprint[16] = {0xDC,0x4A,0x79,0x44,0xCA,0x87,0x06,0x8C,0x3A,0x6D,0x1B,0xCB,0xB8,0x63,0x35,0x69};

uint32_t ThriftPkg::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ret);
          this->__isset.ret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->main_cmd);
          this->__isset.main_cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sub_cmd);
          this->__isset.sub_cmd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->buf_data);
          this->__isset.buf_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->str_data);
          this->__isset.str_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftPkg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ThriftPkg");

  xfer += oprot->writeFieldBegin("ret", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->ret);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("main_cmd", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->main_cmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sub_cmd", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->sub_cmd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buf_data", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->buf_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("str_data", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->str_data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ThriftPkg &a, ThriftPkg &b) {
  using ::std::swap;
  swap(a.ret, b.ret);
  swap(a.main_cmd, b.main_cmd);
  swap(a.sub_cmd, b.sub_cmd);
  swap(a.buf_data, b.buf_data);
  swap(a.str_data, b.str_data);
  swap(a.__isset, b.__isset);
}

} // namespace
